{"version":3,"sources":["components/Header/Header.js","components/Search/Search.js","components/Table/Table.js","App.js","serviceWorker.js","index.js"],"names":["Header","Row","className","Component","Search","Form","Control","id","type","placeholder","Table","getEmployees","a","config","method","url","axios","then","res","allEmployees","i","data","results","length","person","image","picture","thumbnail","name","first","last","phone","email","dob","formatDate","date","push","setState","employees","catch","error","console","log","state","sortName","sortOrder","onSortChange","bind","cleanSort","dateGiven","Date","getMonth","getDate","getFullYear","cell","row","src","alt","this","order","options","bordered","multiColumnSort","striped","dataField","dataFormat","imageFormatter","isKey","dataSort","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.58144075.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Row } from \"react-bootstrap\";\nimport \"./Header.css\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <Row>\n        <header className='header'>\n          <h2>Employee Directory</h2>\n          <h6>\n            Click on headers to sort or use the search box to narrow your\n            results.\n          </h6>\n          <hr />\n        </header>\n      </Row>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport \"./Search.css\";\nimport { Form, Row } from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass Search extends Component {\n  render() {\n    return (\n      <Row className='search'>\n        <Form.Control id='searchBar' type='text' placeholder='Search' />\n      </Row>\n    );\n  }\n}\n\nexport default Search;\n","import React, { Component } from \"react\";\nimport \"./Table.css\";\nimport { BootstrapTable, TableHeaderColumn } from \"react-bootstrap-table\";\nimport \"../../../node_modules/react-bootstrap-table/dist/react-bootstrap-table-all.min.css\";\nimport { Row } from \"react-bootstrap\";\nimport axios from \"axios\";\n\nclass Table extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      sortName: [],\n      sortOrder: [],\n      employees: [],\n    };\n    this.onSortChange = this.onSortChange.bind(this);\n    this.cleanSort = this.cleanSort.bind(this);\n  }\n\n  formatDate(dateGiven) {\n    var date = new Date(dateGiven);\n    return `${date.getMonth() + 1}/${date.getDate()}/${date.getFullYear()}`;\n  }\n\n  imageFormatter(cell, row) {\n    return <img src={\"\" + cell + \"\"} alt='headshot' />;\n  }\n\n  getEmployees = async () => {\n    var config = {\n      method: \"get\",\n      url: \"https://randomuser.me/api/?results=200&nat=us\",\n    };\n\n    await axios(config)\n      .then((res) => {\n        var allEmployees = [];\n        for (var i = 0; i < res.data.results.length; i++) {\n          var person = {\n            image: res.data.results[i].picture.thumbnail,\n            name: `${res.data.results[i].name.first} ${res.data.results[i].name.last}`,\n            phone: res.data.results[i].phone,\n            email: res.data.results[i].email,\n            dob: this.formatDate(res.data.results[i].dob.date),\n          };\n          allEmployees.push(person);\n        }\n        this.setState({\n          employees: allEmployees,\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  };\n\n  componentDidMount() {\n    this.getEmployees();\n  }\n\n  onSortChange(name, order) {\n    const sortName = [];\n    const sortOrder = [];\n\n    for (let i = 0; i < this.state.sortName.length; i++) {\n      if (this.state.sortName[i] !== name) {\n        sortName.push(this.state.sortName[i]);\n        sortOrder.push(this.state.sortOrder[i]);\n      }\n    }\n\n    sortName.push(name);\n    sortOrder.push(order);\n    this.setState({\n      sortName,\n      sortOrder,\n    });\n  }\n\n  cleanSort() {\n    this.setState({\n      sortName: [],\n      sortOrder: [],\n    });\n  }\n\n  render() {\n    const options = {\n      sortName: this.state.sortName,\n      sortOrder: this.state.sortOrder,\n      onSortChange: this.onSortChange,\n    };\n    return (\n      <Row>\n        <BootstrapTable\n          data={this.state.employees}\n          bordered={false}\n          options={options}\n          multiColumnSort={4}\n          striped\n        >\n          <TableHeaderColumn dataField='image' dataFormat={this.imageFormatter}>\n            Image\n          </TableHeaderColumn>\n          <TableHeaderColumn dataField='name' isKey={true} dataSort={true}>\n            Name\n          </TableHeaderColumn>\n          <TableHeaderColumn dataField='phone' dataSort={true}>\n            Phone\n          </TableHeaderColumn>\n          <TableHeaderColumn dataField='email' dataSort={true}>\n            Email\n          </TableHeaderColumn>\n          <TableHeaderColumn dataField='dob' dataSort={true}>\n            DOB\n          </TableHeaderColumn>\n        </BootstrapTable>\n      </Row>\n    );\n  }\n}\n\nexport default Table;\n","import React from \"react\";\nimport Header from \"./components/Header/Header\";\nimport Search from \"./components/Search/Search\";\nimport Table from \"./components/Table/Table\";\nimport { Container } from \"react-bootstrap\";\n\nfunction App() {\n  return (\n    <Container id='container'>\n      <Header />\n      <Search />\n      <Table />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}